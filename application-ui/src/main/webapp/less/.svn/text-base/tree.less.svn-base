@import "header.less";

//reset table
.resetTable() {
	table {
		border-spacing: 0;
		th, td {
			background-clip: padding-box;
			padding: 0;
		}
		th {
			text-align: inherit;
		}
	}
}

//tree
.z-tree {
	border: none;
	overflow: hidden;
	zoom: 1;
	//tree header div
	&-header {
		width: 100%;
		<c:if test="${zk.ie != 8}">
			.verGradient(@baseGradientStart, @baseGradientEnd);
		</c:if>
		position: relative;
		overflow: hidden;
		.resetTable();
	}
	&-header-border {
		border-bottom: 1px solid @meshTitleBorderColor;
		margin-top: -1px;
		position: relative;
	}
	//tree body div
	&-body {
		position: relative;
		overflow: hidden;
		.resetTable();
	}
	&-emptybody td {
		.fontStyle(@baseContentFontFamily, @fontSizeMedium, normal, @disabledColor);
		font-style: italic;
		text-align: center;
		height: 1px;
	}
	//tree footer div
	&-footer {
		border-top: 1px solid @baseBorderColor;
		background: @meshFootBackgroundColor;
		overflow: hidden;
		.resetTable();
	}
}
//tree open icon and indent space
.z-tree {
	&-icon,
	&-line {
		.displaySize(inline-block, @baseIconWidth, @baseIconHeight);
		line-height: @baseIconHeight;
		vertical-align: middle;
	}
	&-icon {
		.iconFontStyle(@baseFontSize, @iconColor);
		text-align: center;
		cursor: pointer;
		
		&:hover {
			color: @lightBlueBgColor;
		}
	}
}
//treecols
.z-treecols {
	th:first-child {
		border-left: none;

		// B50-3306729: the first header should have border-left when the first column is covered with other header
		&.z-treecols-border {
			border-left: 1px solid @meshTitleBorderColor;
		}
	}
	&-bar {
		border-left: 1px solid @meshTitleBorderColor;
		border-bottom: 1px solid @meshTitleBorderColor;
	}
}
.z-treecol {
	border-left: 1px solid @meshTitleBorderColor;
	border-bottom: 1px solid @meshTitleBorderColor;
	padding: 0;
	<c:if test="${zk.ie != 8}">
		.verGradient(@baseGradientStart, @baseGradientEnd);
	</c:if>
	background-clip: padding-box;
	position: relative;
	overflow: hidden;
	white-space: nowrap;
	
	&-sort {
		cursor: pointer;
		
		&:hover {
			<c:if test="${zk.ie != 8}">
				.verGradient(@meshTitleHoverStart, @meshTitleHoverEnd);
			</c:if>
		}
		.z-treecol-sorticon {
			color: @iconColor;
			position: absolute;
			top: -7px;
			left: 50%;
		}
	}
	&-sizing,
	&-sizing .z-treecol-content {
		cursor: e-resize;
	}
}
// ZK-2151: use strict selector to prevent nest problem
//tree row and cell
.z-treerow {
	background: @whiteColor;
	//tree cell @lightBlueBgColor
	.z-treecell {
		overflow: hidden;
		cursor: pointer;
	}
	&:hover {
		> .z-treecell {
			<c:if test="${zk.ie != 8}">
				.verGradient(@whiteColor, @whiteColor);
			</c:if>
			background-clip: padding-box;
			position: relative;

			> .z-treecell-content {
				color: @lightBlueBgColor;
			}
		}
	}
	//check mark
	&-checkable {
		.displaySize(inline-block, @baseIconWidth, @baseIconHeight);
		border: 1px solid @checkedBorderColor;
		background: @checkedBackgroundColor;
		vertical-align: middle;
		
		&.z-treerow-radio {
			.borderRadius(@baseIconWidth / 2);
		}
		.z-treerow-icon {
			display: none;
			cursor: default;
		}
	}
	//selected tree cell
	&.z-treerow-selected {
		> .z-treecell {
//			<c:if test="${zk.ie != 8}">
//				.verGradient(@whiteColor, @whiteColor);
//			</c:if>
			<c:if test="${zk.ie != 8}">
				.verGradient(@lightBlueHoveBgColor, @lightBlueHoveBgColor);
			</c:if>
			background-clip: padding-box;
			position: relative;

			> .z-treecell-content {
				color: @whiteColor;
//				font-weight:bold;
			}
		}
		
		&:hover {
			> .z-treecell {
				<c:if test="${zk.ie != 8}">
					.verGradient(@whiteColor, @whiteColor);
				</c:if>

				> .z-treecell-content {
					color: @lightBlueBgColor;
				}
			}
		}
	}
	//selected check mark
	&-selected {
		> .z-treecell > .z-treecell-content 
			> .z-treerow-checkable .z-treerow-icon {
			color: @checkedColor;
			display: block;
			padding-left: 1px;
			line-height: @baseLineHeight;
			
			&.z-icon-check {} //for checkbox, use font-awesome
			&.z-icon-radio { //for radio
				.size(@baseIconWidth / 2, @baseIconWidth / 2);
				.borderRadius(@baseIconWidth / 4);
				margin: 3px;
				padding: 0;
				background: @checkedColor;
			}
		}
	}
	//disabled
	&.z-treerow-disabled {
		* {
			color: @disabledColor !important;
			cursor: default !important;
		}
		&:hover > .z-treecell {
			.resetGradient();
			position: relative;
		}
	}
}
//content
.z-treecol-content,
.z-treecell-content,
.z-treefooter-content {
	.fontStyle(@treeFontFamily, @fontSizeMedium, normal, @textColorGrayLight);
	padding: 4px 5px;
	line-height: @baseButtonHeight;
	overflow: hidden;
}
.z-treecol-content {
	font-weight: bold;
	padding: 4px 5px 3px;
	position: relative;
}
.z-treecell-content {
	padding: 4px 2px;
	line-height: @baseLineHeight;
}
.z-treecell-text {
	vertical-align: middle;
}
//paging
.z-tree-paging {
	&-top {
		border-bottom: 1px solid @pagingBorderColor;
		overflow: hidden;
		width: 100%;
	}
	&-bottom {
		border-top: 1px solid @pagingBorderColor;
		overflow: hidden;
		width: 100%;
	}
}
.z-tree-autopaging .z-treecell-content {
	height: @meshAutoPagingRowHeight;
	overflow: hidden;
}
// ZK-2151: use strict selector to prevent nest problem
// IE8
.ie8 {
	.z-tree-header {
		background: @meshBackgroundColorIE8;
	}
	.z-treecol {
		position: static;
		background: @whiteColor;
		&-hover, &-sort:hover {
			background: @lightBlueBgColor;
		}
	}
	.z-treerow {
		&:hover > .z-treecell {
			background: @lightBlueBgColor;
		}
		&.z-treerow-selected {
			> .z-treecell {
				position: static;
				background: @lightBlueBgColor;
			}
			&:hover > .z-treecell {
				position: static;
				background: @lightBlueBgColor;
			}
		}
	}
	// check and radio icon fallback
	.z-treerow > .z-treecell 
		> .z-treecell-content > .z-treerow-checkable {
		border-width: 0;
		background: transparent;
		.z-treerow-icon {
			.displaySize(block, 13px, 13px);
			.encodeThemeURL(background, '~./zul/img/common/check-sprite.gif', no-repeat);
			position: relative;
			top: 2px;
			left: 2px;
		}
		.z-icon-check {
			background-position: 0 0;
			&:before {
				display: none;
			}
		}
		.z-icon-radio {
			background-position: 0 -13px;
		}
	}
	.z-treerow-selected > .z-treecell 
		> .z-treecell-content > .z-treerow-checkable {
		
		.z-treerow-icon {
			.displaySize(block, 13px, 13px);
		}

		.z-icon-check {
			background-position: -26px 0px;
		}
		.z-icon-radio {
			margin: 0;
			background-position: -26px -13px;
		}
	}
}
